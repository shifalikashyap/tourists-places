<div class="col-lg-12">
  <% @places.each do |place| %>
    <div class="card mt-4">
      <div class="row">
        <div class="col-lg-4">
          <% if place.image_url.present? %>
          <%= image_tag place.image_url, class: "img-fluid" %>
          <% end %>
        </div>
        <div class="col-lg-8">
          <h3 class="mt-3"><%= place.place_title %></h3>
          <div id="distance_<%= place.id %>"></div>
          <%= link_to "View Place", place_path(place), class: "btn btn-outline-primary mt-2" %>
          <div class="d-grid gap-2 d-md-block mt-3" id="place_<%= place.id %>">
            <% if admin_user_signed_in? && place.likes.exists?(like_by_id: current_admin_user.id) %> 
              <button type="button" class="btn btn-danger"><i class="bi-emoji-heart-eyes-fill"></i> I love this place</button>
            <% else %>
              <%= link_to "Like this place", likes_path(likeable: place, likeable_type: 'place'), class: 'btn btn-primary', data: { turbo_method: :post } %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  <% end %>
</div>



<!-- JavaScript to calculate and display distance -->
<script>
  // Function to calculate distance between two points using Haversine formula
  function calculateDistance(lat1, lon1, lat2, lon2) {
    const earthRadius = {
      km: 6371, // kilometers
      mi: 3959 // miles
    };

    const deltaLat = (lat2 - lat1) * Math.PI / 180;
    const deltaLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = earthRadius.km * c; // Change earthRadius.km to earthRadius.mi for miles

    return distance;
  }

  // Function to get user's current location and calculate distance for each place
  function calculateDistancesForPlaces(places) {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        function(position) {
          const userLatitude = position.coords.latitude;
          const userLongitude = position.coords.longitude;

          places.forEach(function(place) {
            const placeLatitude = place.latitude;
            const placeLongitude = place.longitude;
            const distance = calculateDistance(userLatitude, userLongitude, placeLatitude, placeLongitude);
            displayDistance(place.id, distance.toFixed(2));
          });
        },
        function(error) {
          handleGeolocationError(error);
        }
      );
    } else {
      alert("Geolocation is not supported by this browser.");
    }
  }

  // Function to display distance for a place
  function displayDistance(placeId, distance) {
    document.getElementById(`distance_${placeId}`).innerText = `Distance from your location: ${distance} km`;
  }

  // Function to handle geolocation errors
  function handleGeolocationError(error) {
    let errorMessage = "An error occurred while fetching your location.";

    switch(error.code) {
      case error.PERMISSION_DENIED:
        errorMessage = "User denied the request for Geolocation.";
        break;
      case error.POSITION_UNAVAILABLE:
        errorMessage = "Location information is unavailable.";
        break;
      case error.TIMEOUT:
        errorMessage = "The request to get user location timed out.";
        break;
      case error.UNKNOWN_ERROR:
        errorMessage = "An unknown error occurred.";
        break;
    }

    alert(errorMessage);
  }

  let placeArray = [] 
  <% @places.each do |place| %>
    placeArray.push({"id" : <%= place.id %>, "latitude": <%= place.latitude %>, "longitude": <%= place.longitude %>})
  <% end %>
  console.log(placeArray);

  // Call the function to calculate distances for places
  calculateDistancesForPlaces(placeArray);
</script>


